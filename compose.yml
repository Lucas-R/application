services:
  database:
    image: postgres:15
    container_name: database
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - ${BD_HOST_PORT}:${BD_CONTAINER_PORT}
    volumes:
      - database:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - app-network
  
  backend:
    image: backend:1.0.0
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        EXPORT: ${BACKEND_CONTAINER_PORT}
    environment:
      BACKEND_PORT: ${BACKEND_HOST_PORT}
      BACKEND_HOST: ${BACKEND_HOST}
      DB_HOST: database
      DB_PORT: ${BD_CONTAINER_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
    volumes:
      - ./backend/src:/backend/src
      - /app/node_modules
    ports:
      - ${BACKEND_HOST_PORT}:${BACKEND_CONTAINER_PORT}
    depends_on:
      - database
    networks:
      - app-network
  
  frontend:
    image: frontend:1.0.0
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        EXPOSE: ${FRONTEND_CONTAINER_PORT}
    environment:
      VITE_PORT: ${FRONTEND_CONTAINER_PORT}
      VITE_HOST: ${FRONTEND_HOST}
      VITE_BACKEND: http://backend:${BACKEND_HOST_PORT}
    volumes:
      - ./frontend/src:/frontend/src
      - /frontend/node_modules
    ports:
      - ${FRONTEND_HOST_PORT}:${FRONTEND_CONTAINER_PORT}
    depends_on:
      - backend
      - database
    networks:
      - app-network
  
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "${PGADMIN_PORT}:80"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - app-network


volumes:
  database:

networks:
  app-network:
    driver: bridge